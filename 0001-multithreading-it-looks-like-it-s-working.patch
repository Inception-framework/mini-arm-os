From df0bd9be84e65a615dd7fa2a19bd3d787fd98502 Mon Sep 17 00:00:00 2001
From: Giovanni Camurati <camurati@eurecom.fr>
Date: Wed, 22 Nov 2017 01:21:41 +0100
Subject: [PATCH 1/6] multithreading: it looks like it's working!

---
 07-Threads/Makefile       |   32 +-
 07-Threads/config.json    |  138 ++
 07-Threads/log            | 4595 +++++++++++++++++++++++++++++++++++++++++++++
 07-Threads/os.c           |   77 +-
 07-Threads/os.ld          |   11 +-
 07-Threads/registers.dump |  147 ++
 07-Threads/startup.c      |   12 +-
 07-Threads/threads.c      |   38 +-
 "07-Threads/\303\271"     |   46 +
 9 files changed, 5037 insertions(+), 59 deletions(-)
 create mode 100644 07-Threads/config.json
 create mode 100644 07-Threads/log
 create mode 100644 07-Threads/registers.dump
 create mode 100644 "07-Threads/\303\271"

diff --git a/07-Threads/Makefile b/07-Threads/Makefile
index ab563ee..51691c1 100644
--- a/07-Threads/Makefile
+++ b/07-Threads/Makefile
@@ -1,19 +1,37 @@
 CROSS_COMPILE ?= arm-none-eabi-
 CC := $(CROSS_COMPILE)gcc
 AS := $(CROSS_COMPILE)as
-CFLAGS = -fno-common -ffreestanding -O0 -std=gnu99 \
+CFLAGS = -fno-common -ffreestanding -O0 \
 	 -gdwarf-2 -g3 -Wall -Werror \
 	 -mcpu=cortex-m3 -mthumb \
 	 -Wl,-Tos.ld -nostartfiles \
+         -I.

-TARGET = os.bin
-all: $(TARGET)
+DET_ALLOC_START = 0xf0000000

-$(TARGET): os.c startup.c malloc.c threads.c
+TARGET = os
+
+LLVM-AS = llvm-as
+INCEPTION-CL = inception-cl
+CLANG = clang
+CLANG_FLAGS = -mthumb --target=thumbv7m-eabi -mcpu=cortex-m3
+CLANG_FLAGS += -I. -emit-llvm -g -S -DKLEE
+LLVM-LINK = llvm-link
+
+all: $(TARGET).bin $(TARGET)_merged.bc
+
+$(TARGET).bin: os.c startup.c malloc.c threads.c
 	$(CC) $(CFLAGS) $^ -o os.elf
 	$(CROSS_COMPILE)objcopy -Obinary os.elf os.bin
 	$(CROSS_COMPILE)objdump -S os.elf > os.list

+$(TARGET)_merged.bc: $(TARGET).bin
+	$(CLANG) $(CLANG_FLAGS)  os.c startup.c malloc.c threads.c
+	$(LLVM-LINK) -S os.ll startup.ll malloc.ll threads.ll -o $(TARGET).ll
+	$(LLVM-AS) $(TARGET).ll -o $(TARGET).bc
+	$(INCEPTION-CL) $(INCEPTION_FLAGS) $(TARGET).elf $(TARGET).bc
+	$(LLVM-AS) $(TARGET).elf.ll -o $(TARGET)_merged.bc
+
 qemu: $(TARGET)
 	@qemu-system-arm -M ? | grep stm32-p103 >/dev/null || exit
 	@echo "Press Ctrl-A and then X to exit QEMU"
@@ -21,4 +39,8 @@ qemu: $(TARGET)
 	qemu-system-arm -M stm32-p103 -nographic -kernel os.bin

 clean:
-	rm -f *.o *.elf *.bin *.list
+	rm -f *.o *.elf *.bin *.list *.elf.ll *.ll *.bc *.dis
+	rm -rf klee*
+
+run-klee: $(TARGET)_merged.bc
+	klee --allocate-determ --allocate-determ-start-address $(DET_ALLOC_START) $(TARGET)_merged.bc
diff --git a/07-Threads/config.json b/07-Threads/config.json
new file mode 100644
index 0000000..2667bce
--- /dev/null
+++ b/07-Threads/config.json
@@ -0,0 +1,138 @@
+{
+    "Board" : "STM32L152RE Nucleo",
+    "Analyzer" : [
+      { "Redirection": 0 },
+      { "DynamicInterruptTable": 1 },
+      { "Debugger"   : 0 }
+    ],
+    "RealMemory" : [
+      { "name": "PERIPH_BB_ALIAS_1", "address" : "42470000", "size": "4", "Access": "0"},
+      { "name": "PERIPH_BB_ALIAS_2", "address" : "42470060", "size": "4", "Access": "0"},
+      { "name": "SCU",    "address" : "E000ED00", "size": "E4", "Access": "0"},
+      { "name": "NVIC",   "address" : "E000E100", "size": "E04", "Access": "0"},
+      { "name": "Systick","address" : "E000E010", "size": "10", "Access": "0"},
+      { "name": "FSMC",   "address" : "A0000000", "size": "FFF", "Access": "0"},
+      { "name": "AES" ,   "address" : "50060000", "size": "3FF", "Access": "0"},
+      { "name": "DMA2",   "address" : "40026400", "size": "3FF", "Access": "0"},
+      { "name": "DMA1",   "address" : "40026000", "size": "3FF", "Access": "0"},
+      { "name": "FLASH",  "address" : "40023C00", "size": "3FF", "Access": "0"},
+      { "name": "RCC",    "address" : "40023800", "size": "3FF", "Access": "0"},
+      { "name": "CRC",    "address" : "40023000", "size": "3FF", "Access": "0"},
+      { "name": "GPIOG",  "address" : "40021C00", "size": "3FF", "Access": "0"},
+      { "name": "GPIOF",  "address" : "40021800", "size": "3FF", "Access": "0"},
+      { "name": "GPIOH",  "address" : "40021400", "size": "3FF", "Access": "0"},
+      { "name": "GPIOE",  "address" : "40021000", "size": "3FF", "Access": "0"},
+      { "name": "GPIOD",  "address" : "40020C00", "size": "3FF", "Access": "0"},
+      { "name": "GPIOC",  "address" : "40020800", "size": "3FF", "Access": "0"},
+      { "name": "GPIOB",  "address" : "40020400", "size": "3FF", "Access": "0"},
+      { "name": "GPIOA",  "address" : "40020000", "size": "3FF", "Access": "0"},
+      { "name": "USART1", "address" : "40013800", "size": "3FF", "Access": "0"},
+      { "name": "SPI1",   "address" : "40013000", "size": "3FF", "Access": "0"},
+      { "name": "SDIO",   "address" : "40012C00", "size": "3FF", "Access": "0"},
+      { "name": "ADC",    "address" : "40012400", "size": "3FF", "Access": "0"},
+      { "name": "TIM11",  "address" : "40011000", "size": "3FF", "Access": "0"},
+      { "name": "TIM10",  "address" : "40010C00", "size": "3FF", "Access": "0"},
+      { "name": "TIM9",   "address" : "40010800", "size": "3FF", "Access": "0"},
+      { "name": "EXTI",   "address" : "40010400", "size": "3FF", "Access": "0"},
+      { "name": "SYSCFG", "address" : "40010000", "size": "3FF", "Access": "0"},
+      { "name": "COMP",   "address" : "40007C00", "size": "003", "Access": "0"},
+      { "name": "RI",     "address" : "40007C04", "size": "057", "Access": "0"},
+      { "name": "OPAMP",  "address" : "40007C5C", "size": "3A3", "Access": "0"},
+      { "name": "DAC",    "address" : "40007400", "size": "3FF", "Access": "0"},
+      { "name": "PWR",    "address" : "40007000", "size": "3FF", "Access": "0"},
+      { "name": "USB device FS SRAM 512 bytes", "address" : "40006000", "size": "3FF", "Access": "0"},
+      { "name": "USB device FS",                "address" : "40005C00", "size": "3FF", "Access": "0"},
+      { "name": "I2C2",   "address" : "40005800", "size": "3FF", "Access": "0"},
+      { "name": "I2C1",   "address" : "40005400", "size": "3FF", "Access": "0"},
+      { "name": "USART5", "address" : "40005000", "size": "3FF", "Access": "0"},
+      { "name": "USART4", "address" : "40004C00", "size": "3FF", "Access": "0"},
+      { "name": "USART3", "address" : "40004800", "size": "3FF", "Access": "0"},
+      { "name": "USART2", "address" : "40004400", "size": "3FF", "Access": "0"},
+      { "name": "SPI3",   "address" : "40003C00", "size": "3FF", "Access": "0"},
+      { "name": "SPI2",   "address" : "40003800", "size": "3FF", "Access": "0"},
+      { "name": "IWDG",   "address" : "40003000", "size": "3FF", "Access": "0"},
+      { "name": "WWDG",   "address" : "40002C00", "size": "3FF", "Access": "0"},
+      { "name": "RTC",    "address" : "40002800", "size": "3FF", "Access": "0"},
+      { "name": "LCD",    "address" : "40002400", "size": "3FF", "Access": "0"},
+      { "name": "TIM7",   "address" : "40001400", "size": "3FF", "Access": "0"},
+      { "name": "TIM6",   "address" : "40001000", "size": "3FF", "Access": "0"},
+      { "name": "TIM5",   "address" : "40000C00", "size": "3FF", "Access": "0"},
+      { "name": "TIM4",   "address" : "40000800", "size": "3FF", "Access": "0"},
+      { "name": "TIM3",   "address" : "40000400", "size": "3FF", "Access": "0"},
+      { "name": "TIM2",   "address" : "40000000", "size": "3FF", "Access": "0"}
+    ],
+    "RealInterrupt" : [
+      { "name" : "Reset_Handler" , "id" : 1 , "priority_g" : "0", "priority": "0", "handler": "Reset_Handler" },
+      { "name" : "NMI_Handler" , "id" : 2 , "priority_g" : "0", "priority": "0", "handler": "NMI_Handler" },
+      { "name" : "HardFault_Handler" , "id" : 3 , "priority_g" : "0", "priority": "0", "handler": "HardFault_Handler" },
+      { "name" : "MemManage_Handler" , "id" : 4 , "priority_g" : "0", "priority": "0", "handler": "MemManage_Handler" },
+      { "name" : "BusFault_Handler" , "id" : 5 , "priority_g" : "0", "priority": "0", "handler": "BusFault_Handler" },
+      { "name" : "UsageFault_Handler" , "id" : 6 , "priority_g" : "0", "priority": "0", "handler": "UsageFault_Handler" },
+      { "name" : "SVC_Handler" , "id" : 11 , "priority_g" : "0", "priority": "0", "handler": "SVC_Handler" },
+      { "name" : "DebugMon_Handler" , "id" : 12 , "priority_g" : "0", "priority": "0", "handler": "DebugMon_Handler" },
+      { "name" : "PendSV_Handler" , "id" : 14 , "priority_g" : "0", "priority": "0", "handler": "PendSV_Handler" },
+      { "name" : "SysTick_Handler" , "id" : 15 , "priority_g" : "0", "priority": "0", "handler": "SysTick_Handler" },
+      { "name" : "WWDG_IRQHandler" , "id" : 16 , "priority_g" : "0", "priority": "0", "handler": "WWDG_IRQHandler" },
+      { "name" : "PVD_IRQHandler" , "id" : 17 , "priority_g" : "0", "priority": "0", "handler": "PVD_IRQHandler" },
+      { "name" : "TAMPER_STAMP_IRQHandler" , "id" : 18 , "priority_g" : "0", "priority": "0", "handler": "TAMPER_STAMP_IRQHandler" },
+      { "name" : "RTC_WKUP_IRQHandler" , "id" : 19 , "priority_g" : "0", "priority": "0", "handler": "RTC_WKUP_IRQHandler" },
+      { "name" : "FLASH_IRQHandler" , "id" : 20 , "priority_g" : "0", "priority": "0", "handler": "FLASH_IRQHandler" },
+      { "name" : "RCC_IRQHandler" , "id" : 21 , "priority_g" : "0", "priority": "0", "handler": "RCC_IRQHandler" },
+      { "name" : "EXTI0_IRQHandler" , "id" : 22 , "priority_g" : "0", "priority": "0", "handler": "EXTI0_IRQHandler" },
+      { "name" : "EXTI1_IRQHandler" , "id" : 23 , "priority_g" : "0", "priority": "0", "handler": "EXTI1_IRQHandler" },
+      { "name" : "EXTI2_IRQHandler" , "id" : 24 , "priority_g" : "0", "priority": "0", "handler": "EXTI2_IRQHandler" },
+      { "name" : "EXTI3_IRQHandler" , "id" : 25 , "priority_g" : "0", "priority": "0", "handler": "EXTI3_IRQHandler" },
+      { "name" : "EXTI4_IRQHandler" , "id" : 26 , "priority_g" : "0", "priority": "0", "handler": "EXTI4_IRQHandler" },
+      { "name" : "DMA1_Channel1_IRQHandler" , "id" : 27 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel1_IRQHandler" },
+      { "name" : "DMA1_Channel2_IRQHandler" , "id" : 28 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel2_IRQHandler" },
+      { "name" : "DMA1_Channel3_IRQHandler" , "id" : 29 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel3_IRQHandler" },
+      { "name" : "DMA1_Channel4_IRQHandler" , "id" : 30 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel4_IRQHandler" },
+      { "name" : "DMA1_Channel5_IRQHandler" , "id" : 31 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel5_IRQHandler" },
+      { "name" : "DMA1_Channel6_IRQHandler" , "id" : 32 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel6_IRQHandler" },
+      { "name" : "DMA1_Channel7_IRQHandler" , "id" : 33 , "priority_g" : "0", "priority": "0", "handler": "DMA1_Channel7_IRQHandler" },
+      { "name" : "ADC1_IRQHandler" , "id" : 34 , "priority_g" : "0", "priority": "0", "handler": "ADC1_IRQHandler" },
+      { "name" : "USB_HP_IRQHandler" , "id" : 35 , "priority_g" : "0", "priority": "0", "handler": "USB_HP_IRQHandler" },
+      { "name" : "USB_LP_IRQHandler" , "id" : 36 , "priority_g" : "0", "priority": "0", "handler": "USB_LP_IRQHandler" },
+      { "name" : "DAC_IRQHandler" , "id" : 37 , "priority_g" : "0", "priority": "0", "handler": "DAC_IRQHandler" },
+      { "name" : "COMP_IRQHandler" , "id" : 38 , "priority_g" : "0", "priority": "0", "handler": "COMP_IRQHandler" },
+      { "name" : "EXTI9_5_IRQHandler" , "id" : 39 , "priority_g" : "0", "priority": "0", "handler": "EXTI9_5_IRQHandler" },
+      { "name" : "LCD_IRQHandler" , "id" : 40 , "priority_g" : "0", "priority": "0", "handler": "LCD_IRQHandler" },
+      { "name" : "TIM9_IRQHandler" , "id" : 41 , "priority_g" : "0", "priority": "0", "handler": "TIM9_IRQHandler" },
+      { "name" : "TIM10_IRQHandler" , "id" : 42 , "priority_g" : "0", "priority": "0", "handler": "TIM10_IRQHandler" },
+      { "name" : "TIM11_IRQHandler" , "id" : 43 , "priority_g" : "0", "priority": "0", "handler": "TIM11_IRQHandler" },
+      { "name" : "TIM2_IRQHandler" , "id" : 44 , "priority_g" : "0", "priority": "0", "handler": "TIM2_IRQHandler" },
+      { "name" : "TIM3_IRQHandler" , "id" : 45 , "priority_g" : "0", "priority": "0", "handler": "TIM3_IRQHandler" },
+      { "name" : "TIM4_IRQHandler" , "id" : 46 , "priority_g" : "0", "priority": "0", "handler": "TIM4_IRQHandler" },
+      { "name" : "I2C1_EV_IRQHandler" , "id" : 47 , "priority_g" : "0", "priority": "0", "handler": "I2C1_EV_IRQHandler" },
+      { "name" : "I2C1_ER_IRQHandler" , "id" : 48 , "priority_g" : "0", "priority": "0", "handler": "I2C1_ER_IRQHandler" },
+      { "name" : "I2C2_EV_IRQHandler" , "id" : 49 , "priority_g" : "0", "priority": "0", "handler": "I2C2_EV_IRQHandler" },
+      { "name" : "I2C2_ER_IRQHandler" , "id" : 50 , "priority_g" : "0", "priority": "0", "handler": "I2C2_ER_IRQHandler" },
+      { "name" : "SPI1_IRQHandler" , "id" : 51 , "priority_g" : "0", "priority": "0", "handler": "SPI1_IRQHandler" },
+      { "name" : "SPI2_IRQHandler" , "id" : 52 , "priority_g" : "0", "priority": "0", "handler": "SPI2_IRQHandler" },
+      { "name" : "USART1_IRQHandler" , "id" : 53 , "priority_g" : "0", "priority": "0", "handler": "USART1_IRQHandler" },
+      { "name" : "USART2_IRQHandler" , "id" : 54 , "priority_g" : "0", "priority": "0", "handler": "USART2_IRQHandler" },
+      { "name" : "USART3_IRQHandler" , "id" : 55 , "priority_g" : "0", "priority": "0", "handler": "USART3_IRQHandler" },
+      { "name" : "EXTI15_10_IRQHandler" , "id" : 56 , "priority_g" : "0", "priority": "0", "handler": "EXTI15_10_IRQHandler" },
+      { "name" : "RTC_Alarm_IRQHandler" , "id" : 57 , "priority_g" : "0", "priority": "0", "handler": "RTC_Alarm_IRQHandler" },
+      { "name" : "USB_FS_WKUP_IRQHandler" , "id" : 58 , "priority_g" : "0", "priority": "0", "handler": "USB_FS_WKUP_IRQHandler" },
+      { "name" : "TIM6_IRQHandler" , "id" : 59 , "priority_g" : "0", "priority": "0", "handler": "TIM6_IRQHandler" },
+      { "name" : "TIM7_IRQHandler" , "id" : 60 , "priority_g" : "0", "priority": "0", "handler": "TIM7_IRQHandler" },
+      { "name" : "TIM5_IRQHandler" , "id" : 62 , "priority_g" : "0", "priority": "0", "handler": "TIM5_IRQHandler" },
+      { "name" : "SPI3_IRQHandler" , "id" : 63 , "priority_g" : "0", "priority": "0", "handler": "SPI3_IRQHandler" },
+      { "name" : "UART4_IRQHandler" , "id" : 64 , "priority_g" : "0", "priority": "0", "handler": "UART4_IRQHandler" },
+      { "name" : "UART5_IRQHandler" , "id" : 65 , "priority_g" : "0", "priority": "0", "handler": "UART5_IRQHandler" },
+      { "name" : "DMA2_Channel1_IRQHandler" , "id" : 66 , "priority_g" : "0", "priority": "0", "handler": "DMA2_Channel1_IRQHandler" },
+      { "name" : "DMA2_Channel2_IRQHandler" , "id" : 67 , "priority_g" : "0", "priority": "0", "handler": "DMA2_Channel2_IRQHandler" },
+      { "name" : "DMA2_Channel3_IRQHandler" , "id" : 68 , "priority_g" : "0", "priority": "0", "handler": "DMA2_Channel3_IRQHandler" },
+      { "name" : "DMA2_Channel4_IRQHandler" , "id" : 69 , "priority_g" : "0", "priority": "0", "handler": "DMA2_Channel4_IRQHandler" },
+      { "name" : "DMA2_Channel5_IRQHandler" , "id" : 70 , "priority_g" : "0", "priority": "0", "handler": "DMA2_Channel5_IRQHandler" },
+      { "name" : "COMP_ACQ_IRQHandler" , "id" : 72 , "priority_g" : "0", "priority": "0", "handler": "COMP_ACQ_IRQHandler" },
+      { "name" : "BootRAM" , "id" : 78 , "priority_g" : "0", "priority": "0", "handler": "BootRAM" }
+    ],
+    "Stub" : [
+      { "address": "20004000"}
+    ],
+    "Binary" : [
+      { "Path": "os.elf"}
+    ]
+}
diff --git a/07-Threads/os.c b/07-Threads/os.c
index 87538d9..d726994 100644
--- a/07-Threads/os.c
+++ b/07-Threads/os.c
@@ -7,39 +7,46 @@
  * This flag is cleared when data is written to USARTx_DR and
  * set when that data is transferred to the TDR
  */
-#define USART_FLAG_TXE	((uint16_t) 0x0080)
-
-void usart_init(void)
-{
-	*(RCC_APB2ENR) |= (uint32_t) (0x00000001 | 0x00000004);
-	*(RCC_APB1ENR) |= (uint32_t) (0x00020000);
-
-	/* USART2 Configuration, Rx->PA3, Tx->PA2 */
-	*(GPIOA_CRL) = 0x00004B00;
-	*(GPIOA_CRH) = 0x44444444;
-	*(GPIOA_ODR) = 0x00000000;
-	*(GPIOA_BSRR) = 0x00000000;
-	*(GPIOA_BRR) = 0x00000000;
-
-	*(USART2_CR1) = 0x0000000C;
-	*(USART2_CR2) = 0x00000000;
-	*(USART2_CR3) = 0x00000000;
-	*(USART2_CR1) |= 0x2000;
-}
+//#define USART_FLAG_TXE	((uint16_t) 0x0080)
+//
+//void usart_init(void)
+//{
+//	*(RCC_APB2ENR) |= (uint32_t) (0x00000001 | 0x00000004);
+//	*(RCC_APB1ENR) |= (uint32_t) (0x00020000);
+//
+//	/* USART2 Configuration, Rx->PA3, Tx->PA2 */
+//	*(GPIOA_CRL) = 0x00004B00;
+//	*(GPIOA_CRH) = 0x44444444;
+//	*(GPIOA_ODR) = 0x00000000;
+//	*(GPIOA_BSRR) = 0x00000000;
+//	*(GPIOA_BRR) = 0x00000000;
+//
+//	*(USART2_CR1) = 0x0000000C;
+//	*(USART2_CR2) = 0x00000000;
+//	*(USART2_CR3) = 0x00000000;
+//	*(USART2_CR1) |= 0x2000;
+//}

 void print_str(const char *str)
 {
-	while (*str) {
-		while (!(*(USART2_SR) & USART_FLAG_TXE));
-		*(USART2_DR) = (*str & 0xFF);
-		str++;
-	}
+   #ifdef KLEE
+   printf("%s",str);
+   #endif
+//	while (*str) {
+//		while (!(*(USART2_SR) & USART_FLAG_TXE));
+//		*(USART2_DR) = (*str & 0xFF);
+//		str++;
+//	}
 }

 static void delay(volatile int count)
 {
-	count *= 50000;
-	while (count--);
+	count *= 1;//50000;
+	while (count--){
+                #ifdef KLEE
+                inception_raise_irq(15);
+                #endif
+        }
 }

 static void busy_loop(void *str)
@@ -47,7 +54,9 @@ static void busy_loop(void *str)
 	while (1) {
 		print_str(str);
 		print_str(": Running...\n");
-		delay(1000);
+		delay(10);
+		print_str(str);
+		print_str(": Returning...\n");
 	}
 }

@@ -76,22 +85,26 @@ int main(void)
 {
 	const char *str1 = "Task1", *str2 = "Task2", *str3 = "Task3";

-	usart_init();
+	//usart_init();

+        print_str("main creating Task 1\r\n");
 	if (thread_create(test1, (void *) str1) == -1)
 		print_str("Thread 1 creation failed\r\n");

+        print_str("main creating Task 2\r\n");
 	if (thread_create(test2, (void *) str2) == -1)
 		print_str("Thread 2 creation failed\r\n");

+        print_str("main creating Task 3\r\n");
 	if (thread_create(test3, (void *) str3) == -1)
 		print_str("Thread 3 creation failed\r\n");

-	/* SysTick configuration */
-	*SYSTICK_LOAD = (CPU_CLOCK_HZ / TICK_RATE_HZ) - 1UL;
-	*SYSTICK_VAL = 0;
-	*SYSTICK_CTRL = 0x07;
+	///* SysTick configuration */
+	//*SYSTICK_LOAD = (CPU_CLOCK_HZ / TICK_RATE_HZ) - 1UL;
+	//*SYSTICK_VAL = 0;
+	//*SYSTICK_CTRL = 0x07;

+        print_str("main starting Tasks\r\n");
 	thread_start();

 	return 0;
diff --git a/07-Threads/os.ld b/07-Threads/os.ld
index 919e3be..a3447c0 100644
--- a/07-Threads/os.ld
+++ b/07-Threads/os.ld
@@ -8,13 +8,14 @@ MEMORY

 SECTIONS
 {
+        .interrupt_vector = ORIGIN(FLASH);
+
 	.text :
 	{
 		KEEP(*(.isr_vector))
 		*(.text)
 		*(.text.*)
 		*(.rodata)
-		*(.rodata.*)
 		_sromdev = .;
 		_eromdev = .;
 		_sidata = .;
@@ -35,5 +36,11 @@ SECTIONS
 		_ebss = .;
 	} >RAM

-	_estack = ORIGIN(RAM) + LENGTH(RAM);
+	.stack :
+	{
+          _sstack = .;
+          . = . + ORIGIN(RAM) + LENGTH(RAM) - _ebss;
+          _estack = .;
+	} >RAM
+
 }
diff --git a/07-Threads/registers.dump b/07-Threads/registers.dump
new file mode 100644
index 0000000..6e95447
--- /dev/null
+++ b/07-Threads/registers.dump
@@ -0,0 +1,147 @@
+.stack
+	address: 536875180
+	value[0]: 0
+	next: object at 536903360 of size 4
+		MO24[4] allocated at global:_estack
+	prev: object at 536875180 of size 28180
+		MO59[28180] allocated at global:.stack
+CF
+	address: 4026532520
+	value[0]: 0
+	next: object at 4026532540 of size 4
+		MO52[4] allocated at global:CPSR
+	prev: object at 4026532520 of size 4
+		MO51[4] allocated at global:CF
+LR
+	address: 4026532400
+	value[0]: 134217892
+	next: object at 4026532420 of size 4
+		MO46[4] allocated at global:R3
+	prev: object at 4026532400 of size 4
+		MO45[4] allocated at global:LR
+NF
+	address: 4026532480
+	value[0]: 0
+	next: object at 4026532500 of size 4
+		MO50[4] allocated at global:ZF
+	prev: object at 4026532480 of size 4
+		MO49[4] allocated at global:NF
+PC
+	address: 4026532580
+	value[0]: 134217892
+	next: object at 4026532600 of size 4
+		MO55[4] allocated at global:APSR
+	prev: object at 4026532580 of size 4
+		MO54[4] allocated at global:PC
+R0
+	address: 4026532240
+	value[0]: 4026531853
+	next: object at 4026532260 of size 4
+		MO38[4] allocated at global:R4
+	prev: object at 4026532240 of size 4
+		MO37[4] allocated at global:R0
+R1
+	address: 4026532460
+	value[0]: 536875056
+	next: object at 4026532480 of size 4
+		MO49[4] allocated at global:NF
+	prev: object at 4026532460 of size 4
+		MO48[4] allocated at global:R1
+R10
+	address: 4026532360
+	value[0]: 2880154539
+	next: object at 4026532380 of size 4
+		MO44[4] allocated at global:R11
+	prev: object at 4026532360 of size 4
+		MO43[4] allocated at global:R10
+R11
+	address: 4026532380
+	value[0]: 2880154539
+	next: object at 4026532400 of size 4
+		MO45[4] allocated at global:LR
+	prev: object at 4026532380 of size 4
+		MO44[4] allocated at global:R11
+R12
+	address: 4026532640
+	value[0]: 0
+	next: object at 4026532660 of size 4
+		MO58[4] allocated at global:CONTROL_1
+	prev: object at 4026532640 of size 4
+		MO57[4] allocated at global:R12
+R2
+	address: 4026532440
+	value[0]: 0
+	next: object at 4026532460 of size 4
+		MO48[4] allocated at global:R1
+	prev: object at 4026532440 of size 4
+		MO47[4] allocated at global:R2
+R3
+	address: 4026532420
+	value[0]: 4026534200
+	next: object at 4026532440 of size 4
+		MO47[4] allocated at global:R2
+	prev: object at 4026532420 of size 4
+		MO46[4] allocated at global:R3
+R4
+	address: 4026532260
+	value[0]: 2880154539
+	next: object at 4026532280 of size 4
+		MO39[4] allocated at global:R5
+	prev: object at 4026532260 of size 4
+		MO38[4] allocated at global:R4
+R5
+	address: 4026532280
+	value[0]: 2880154539
+	next: object at 4026532300 of size 4
+		MO40[4] allocated at global:R6
+	prev: object at 4026532280 of size 4
+		MO39[4] allocated at global:R5
+R6
+	address: 4026532300
+	value[0]: 2880154539
+	next: object at 4026532320 of size 4
+		MO41[4] allocated at global:R8
+	prev: object at 4026532300 of size 4
+		MO40[4] allocated at global:R6
+R7
+	address: 4026532180
+	value[0]: 2880154539
+	next: object at 4026532200 of size 4
+		MO35[4] allocated at global:SP
+	prev: object at 4026532180 of size 4
+		MO34[4] allocated at global:R7
+R8
+	address: 4026532320
+	value[0]: 2880154539
+	next: object at 4026532340 of size 4
+		MO42[4] allocated at global:R9
+	prev: object at 4026532320 of size 4
+		MO41[4] allocated at global:R8
+R9
+	address: 4026532340
+	value[0]: 2880154539
+	next: object at 4026532360 of size 4
+		MO43[4] allocated at global:R10
+	prev: object at 4026532340 of size 4
+		MO42[4] allocated at global:R9
+SP
+	address: 4026532200
+	value[0]: 4026534240
+	next: object at 4026532220 of size 4
+		MO36[4] allocated at global:PSP
+	prev: object at 4026532200 of size 4
+		MO35[4] allocated at global:SP
+VF
+	address: 4026532560
+	value[0]: 0
+	next: object at 4026532580 of size 4
+		MO54[4] allocated at global:PC
+	prev: object at 4026532560 of size 4
+		MO53[4] allocated at global:VF
+ZF
+	address: 4026532500
+	value[0]: 1
+	next: object at 4026532520 of size 4
+		MO51[4] allocated at global:CF
+	prev: object at 4026532500 of size 4
+		MO50[4] allocated at global:ZF
diff --git a/07-Threads/startup.c b/07-Threads/startup.c
index bba6d32..4916925 100644
--- a/07-Threads/startup.c
+++ b/07-Threads/startup.c
@@ -27,17 +27,17 @@ extern void main(void);

 /* start address for the initialization values of the .data section.
  * defined in linker script */
-extern uint32_t _sidata;
+/*extern*/ uint32_t _sidata;
 /* start address for the .data section. defined in linker script */
-extern uint32_t _sdata;
+/*extern*/ uint32_t _sdata;
 /* end address for the .data section. defined in linker script */
-extern uint32_t _edata;
+/*extern*/ uint32_t _edata;
 /* start address for the .bss section. defined in linker script */
-extern uint32_t _sbss;
+/*extern*/ uint32_t _sbss;
 /* end address for the .bss section. defined in linker script */
-extern uint32_t _ebss;
+/*extern*/ uint32_t _ebss;
 /* end address for the stack. defined in linker script */
-extern uint32_t _estack;
+/*extern*/ uint32_t _estack;

 void rcc_clock_init(void);

diff --git a/07-Threads/threads.c b/07-Threads/threads.c
index 5bda3b6..121dac0 100644
--- a/07-Threads/threads.c
+++ b/07-Threads/threads.c
@@ -21,8 +21,11 @@ static int first = 1;
  * pointer. If so, after restoring the tasks' context, we will get wrong stack
  * pointer.
  */
-void __attribute__((naked)) pendsv_handler()
+int found = 1;
+void /*__attribute__((naked))*/ pendsv_handler()
 {
+	asm volatile("pop {r7}\n");
+
 	/* Save the old task's context */
 	asm volatile("mrs   r0, psp\n"
 	             "stmdb r0!, {r4-r11, lr}\n");
@@ -30,24 +33,30 @@ void __attribute__((naked)) pendsv_handler()
 	asm volatile("mov   %0, r0\n" : "=r" (tasks[lastTask].stack));

 	/* Find a new task to run */
-	while (1) {
+        found = 0;
+	while (!found) {
 		lastTask++;
 		if (lastTask == MAX_TASKS)
 			lastTask = 0;
-		if (tasks[lastTask].in_use) {
-			/* Move the task's stack pointer address into r0 */
-			asm volatile("mov r0, %0\n" : : "r" (tasks[lastTask].stack));
-			/* Restore the new task's context and jump to the task */
-			asm volatile("ldmia r0!, {r4-r11, lr}\n"
-			             "msr psp, r0\n"
-			             "bx lr\n");
-		}
-	}
+		if (tasks[lastTask].in_use)
+                        found = 1;
+        }
+
+        /* Move the task's stack pointer address into r0 */
+        asm volatile("mov r0, %0\n" : : "r" (tasks[lastTask].stack));
+        /* Restore the new task's context and jump to the task */
+        asm volatile("ldmia r0!, {r4-r11, lr}\n"
+                    "msr psp, r0\n"
+                    "bx lr\n");
+
 }

 void systick_handler()
 {
-	*SCB_ICSR |= SCB_ICSR_PENDSVSET;
+	//*SCB_ICSR |= SCB_ICSR_PENDSVSET;
+        #ifdef KLEE
+        inception_raise_irq(14);
+        #endif
 }

 void thread_start()
@@ -70,7 +79,8 @@ void thread_start()
 	             "isb\n"
 	             "pop {r4-r11, lr}\n"
 	             "pop {r0}\n"
-	             "bx lr\n");
+	             //"bx lr\n");
+	             "blx lr\n");
 }

 int thread_create(void (*run)(void *), void *userdata)
@@ -131,5 +141,5 @@ void thread_self_terminal()
 	asm volatile("cpsie i\n");

 	/* And now wait for death to kick in */
-	while (1);
+	//while (1);
 }
diff --git "a/07-Threads/\303\271" "b/07-Threads/\303\271"
new file mode 100644
index 0000000..fbc040e
--- /dev/null
+++ "b/07-Threads/\303\271"
@@ -0,0 +1,46 @@
+CROSS_COMPILE ?= arm-none-eabi-
+CC := $(CROSS_COMPILE)gcc
+AS := $(CROSS_COMPILE)as
+CFLAGS = -fno-common -ffreestanding -O0 \
+	 -gdwarf-2 -g3 -Wall -Werror \
+	 -mcpu=cortex-m3 -mthumb \
+	 -Wl,-Tos.ld -nostartfiles \
+         -I.
+
+DET_ALLOC_START = 0xf0000000
+
+TARGET = os
+
+LLVM-AS = llvm-as
+INCEPTION-CL = inception-cl
+CLANG = clang
+CLANG_FLAGS = -mthumb --target=thumbv7m-eabi -mcpu=cortex-m3
+CLANG_FLAGS += -I. -emit-llvm -g -S -DKLEE
+LLVM-LINK = llvm-link
+
+all: $(TARGET).bin $(TARGET)_merged.bc
+
+$(TARGET).bin: os.c startup.c malloc.c threads.c
+	$(CC) $(CFLAGS) $^ -o os.elf
+	$(CROSS_COMPILE)objcopy -Obinary os.elf os.bin
+	$(CROSS_COMPILE)objdump -S os.elf > os.list
+
+$(TARGET)_merged.bc: $(TARGET).bin
+	$(CLANG) $(CLANG_FLAGS)  os.c startup.c
+	$(LLVM-LINK) -S os.ll startup.ll malloc.ll threads.ll -o $(TARGET).ll
+	$(LLVM-AS) $(TARGET).ll -o $(TARGET).bc
+	$(INCEPTION-CL) $(INCEPTION_FLAGS) $(TARGET).elf $(TARGET).bc
+	$(LLVM-AS) $(TARGET).elf.ll -o $(TARGET)_merged.bc
+
+qemu: $(TARGET)
+	@qemu-system-arm -M ? | grep stm32-p103 >/dev/null || exit
+	@echo "Press Ctrl-A and then X to exit QEMU"
+	@echo
+	qemu-system-arm -M stm32-p103 -nographic -kernel os.bin
+
+clean:
+	rm -f *.o *.elf *.bin *.list *.elf.ll *.ll *.bc *.dis
+	rm -rf klee*
+
+run-klee: $(TARGET)_merged.bc
+	klee --allocate-determ --allocate-determ-start-address $(DET_ALLOC_START) $(TARGET)_merged.bc
--
2.7.4
