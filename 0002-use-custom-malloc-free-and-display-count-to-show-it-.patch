From 5552ec5a2034ffdbced3ac95464daf8af75f2f43 Mon Sep 17 00:00:00 2001
From: Giovanni Camurati <camurati@eurecom.fr>
Date: Wed, 22 Nov 2017 11:25:53 +0100
Subject: [PATCH 2/6] use custom malloc/free and display count to show it's
 really working

---
 07-Threads/my_malloc.c | 102 +++++++++++++++++++++++++++++++++++++++++++++++++
 07-Threads/my_malloc.h |   7 ++++
 2 files changed, 109 insertions(+)
 create mode 100644 07-Threads/my_malloc.c
 create mode 100644 07-Threads/my_malloc.h

diff --git a/07-Threads/my_malloc.c b/07-Threads/my_malloc.c
new file mode 100644
index 0000000..4ae9d5c
--- /dev/null
+++ b/07-Threads/my_malloc.c
@@ -0,0 +1,102 @@
+#include <stddef.h>
+#include "my_malloc.h"
+#include "os.h"
+
+typedef long Align;
+
+union header {
+	struct {
+		union header *ptr;
+		unsigned int size;
+	} s;
+	Align x;
+};
+
+typedef union header Header;
+
+static unsigned char heaps[MAX_HEAPS];
+static unsigned char *program_break = heaps;
+
+static Header base; /* empty list to get started */
+static Header *my_freep = NULL; /* start of my_free list */
+
+static void *sbrk(unsigned int nbytes)
+{
+	if (program_break + nbytes >= heaps
+	    && program_break + nbytes < heaps + MAX_HEAPS) {
+		unsigned char *previous_pb = program_break;
+		program_break += nbytes;
+		return (void *) previous_pb;
+	}
+	return (void *) -1;
+}
+
+void *my_malloc(unsigned int nbytes)
+{
+	Header *p, *prevp;
+	unsigned int nunits;
+	void *cp;
+
+	nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
+
+	if ((prevp = my_freep) == NULL) {
+		base.s.ptr = my_freep = prevp = &base;
+		base.s.size = 0;
+	}
+
+	for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {
+		if (p->s.size >= nunits) {
+			if (p->s.size == nunits) {
+				prevp->s.ptr = p->s.ptr;
+			} else {
+				p->s.size -= nunits;
+				p += p->s.size;
+				p->s.size = nunits;
+			}
+			my_freep = prevp;
+                        #ifdef KLEE
+                        printf("my_malloc allocating %d bytes at %p\n",nbytes,p+1);
+                        #endif
+			return (void *)(p + 1);
+		}
+
+		if (p == my_freep) {
+			cp = sbrk(nunits * sizeof(Header));
+			if (cp == (void *) -1) {
+				return NULL;
+			} else {
+				p = (Header *) cp;
+				p->s.size = nunits;
+				my_free((void *) (p + 1));
+				p = my_freep;
+			}
+		}
+	}
+}
+
+void my_free(void *ap)
+{
+	Header *bp, *p;
+	bp = (Header *) ap - 1;
+
+	for (p = my_freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
+		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+			break;
+	}
+
+	if (bp + bp->s.size == p->s.ptr) {
+		bp->s.size += p->s.ptr->s.size;
+		bp->s.ptr = p->s.ptr->s.ptr;
+	} else {
+		bp->s.ptr = p->s.ptr;
+	}
+
+	if (p + p->s.size == bp) {
+		p->s.size += bp->s.size;
+		p->s.ptr = bp->s.ptr;
+	} else {
+		p->s.ptr = bp;
+	}
+
+	my_freep = p;
+}
diff --git a/07-Threads/my_malloc.h b/07-Threads/my_malloc.h
new file mode 100644
index 0000000..de2182a
--- /dev/null
+++ b/07-Threads/my_malloc.h
@@ -0,0 +1,7 @@
+#ifndef __MALLOC_H_
+#define __MALLOC_H_
+
+void *my_malloc(unsigned int nbytes);
+void my_free(void *ap);
+
+#endif
-- 
2.7.4

